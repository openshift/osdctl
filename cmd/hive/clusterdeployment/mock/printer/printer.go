// Code generated by MockGen. DO NOT EDIT.
// Source: listresources.go
//
// Generated by this command:
//
//	mockgen -destination ./mock/printer/printer.go -package printer -source listresources.go Printer
//

// Package printer is a generated GoMock package.
package printer

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPrinter is a mock of Printer interface.
type MockPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockPrinterMockRecorder
	isgomock struct{}
}

// MockPrinterMockRecorder is the mock recorder for MockPrinter.
type MockPrinterMockRecorder struct {
	mock *MockPrinter
}

// NewMockPrinter creates a new mock instance.
func NewMockPrinter(ctrl *gomock.Controller) *MockPrinter {
	mock := &MockPrinter{ctrl: ctrl}
	mock.recorder = &MockPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrinter) EXPECT() *MockPrinterMockRecorder {
	return m.recorder
}

// AddRow mocks base method.
func (m *MockPrinter) AddRow(row []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRow", row)
}

// AddRow indicates an expected call of AddRow.
func (mr *MockPrinterMockRecorder) AddRow(row any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRow", reflect.TypeOf((*MockPrinter)(nil).AddRow), row)
}

// Flush mocks base method.
func (m *MockPrinter) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockPrinterMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockPrinter)(nil).Flush))
}
